name: Publish to PyPI

env:
    pythonVersion: "3.11"

on:
    release:
        types: [published]

jobs:
    build:
        name: "Build and Test"
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v4
              with:
                version: "latest"

            - name: Set up Python ${{ env.pythonVersion }}
              run: uv python install ${{ env.pythonVersion }}

            - name: Install dependencies
              run: uv sync --extra dev

            - name: Run Tests
              run: uv run pytest tests/

            - name: Run Linter
              run: uv run ruff check src/

    publish:
        name: "Deploy package to PyPI"
        runs-on: ubuntu-latest
        needs: [build]

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v4
              with:
                version: "latest"

            - name: Set up Python ${{ env.pythonVersion }}
              run: uv python install ${{ env.pythonVersion }}

            - name: Install dependencies
              run: uv sync --extra dev

            - name: Build package
              run: uv build

            - name: Publish to PyPI
              env:
                  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
              run: uv publish --token $PYPI_TOKEN

    docs:
        name: "Deploy Docs"
        runs-on: ubuntu-latest
        needs: [build, publish]
        # Only deploy docs for stable releases (not pre-releases/betas)
        if: github.event.release.prerelease == false
        steps:
            - uses: actions/checkout@v4
              with:
                  persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
                  fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

            - name: Install uv
              uses: astral-sh/setup-uv@v4
              with:
                version: "latest"

            - name: Set up Python ${{ env.pythonVersion }}
              run: uv python install ${{ env.pythonVersion }}

            - name: Install dependencies
              run: uv sync --extra dev

            - name: Create local changes
              run: |
                  cd docs
                  make html
                  cd ..
                  rm -rf tests src .github *.md *.MD *.rst *.lock *.toml LICENSE .flake8 dist .vscode
                  rm -rf .editorconfig
                  mv docs/build/html/* .
                  rm -rf docs/
                  touch .nojekyll
                  echo "py.sdk.tago.io" > CNAME

            - name: Commit files
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add -A
                  git commit -m "generated documentation"

            - name: Push changes
              uses: ad-m/github-push-action@master
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  branch: gh-pages
                  force: true
